[{"/Users/matt/Desktop/crypto/playground/social/src/index.js":"1","/Users/matt/Desktop/crypto/playground/social/src/App.js":"2","/Users/matt/Desktop/crypto/playground/social/src/reportWebVitals.js":"3","/Users/matt/Desktop/crypto/playground/social/src/components/Footer.js":"4","/Users/matt/Desktop/crypto/playground/social/src/utils/networks.js":"5","/Users/matt/Desktop/crypto/playground/social/src/components/Header.js":"6","/Users/matt/Desktop/crypto/playground/social/src/components/Home.js":"7","/Users/matt/Desktop/crypto/playground/social/src/components/WorkoutForm.js":"8"},{"size":535,"mtime":1656441449102,"results":"9","hashOfConfig":"10"},{"size":404,"mtime":1656621409975,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1656441449102,"results":"12","hashOfConfig":"10"},{"size":657,"mtime":1656618460338,"results":"13","hashOfConfig":"10"},{"size":312,"mtime":1656617985106,"results":"14","hashOfConfig":"10"},{"size":152,"mtime":1656620723937,"results":"15","hashOfConfig":"10"},{"size":3652,"mtime":1656621671636,"results":"16","hashOfConfig":"10"},{"size":3906,"mtime":1656622113686,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jo7c1a",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/matt/Desktop/crypto/playground/social/src/index.js",[],[],"/Users/matt/Desktop/crypto/playground/social/src/App.js",[],[],"/Users/matt/Desktop/crypto/playground/social/src/reportWebVitals.js",[],[],"/Users/matt/Desktop/crypto/playground/social/src/components/Footer.js",[],[],"/Users/matt/Desktop/crypto/playground/social/src/utils/networks.js",[],[],"/Users/matt/Desktop/crypto/playground/social/src/components/Header.js",[],[],"/Users/matt/Desktop/crypto/playground/social/src/components/Home.js",["43","44","45","46"],[],"import '../App.css'\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"\nimport { networks } from '../utils/networks';\nimport WorkoutForm from \"./WorkoutForm\";\n\nfunction Home() {\n    // consts\n    const [currentAccount, setCurrentAccount] = useState('');\n    const [profile, setProfile] = useState([]);\n    const [network, setNetwork] = useState('');\n\n    // Implement connectWallet method\n    const connectWallet = async () => {\n        try {\n        const { ethereum } = window;\n\n        if (!ethereum) {\n            alert(\"Get MetaMask -> https://metamask.io/\");\n            return;\n        }\n\n        // method to request access to account.\n        const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n        // This should print out public address once we authorize Metamask.\n        console.log(\"Connected\", accounts[0]);\n        const account = accounts[0];\n        setCurrentAccount(account);\n        } catch (error) {\n        console.log(error)\n        }\n    }\n\n    const checkIfWalletIsConnected = async () => {\n        const { ethereum } = window;\n    \n        if (!ethereum) {\n        console.log('Make sure you have metamask!');\n        return;\n        } else {\n        console.log('We have the ethereum object', ethereum);\n        }\n    \n        // Check if we're authorized to access the user's wallet\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n    \n        // Users can have multiple authorized accounts, we grab the first one.\n        if (accounts.length !== 0) {\n        const account = accounts[0];\n            console.log('Found an authorized account:', account);\n        } else {\n            console.log('No authorized account found');\n        }\n\n        // check the user's network chain ID\n        const chainId = await ethereum.request({ method: 'eth_chainId' });\n        setNetwork(networks[chainId]);\n\n        ethereum.on('chainChanged', handleChainChanged);\n        \n        // Reload the page when they change networks\n        function handleChainChanged(_chainId) {\n            window.location.reload();\n        }\n    };\n\n    // Create a function to render if Lens account is not connected yet\n    const renderNotConnectedContainer = () => (\n        <div>\n            <h1>Sparta</h1>\n            <p>\n            Sparta is a social fitness app built on &nbsp;  \n            <a\n                className=\"App-link\"\n                href=\"https://lens.xyz/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                Lens\n            </a> \n            </p>\n            <button onClick={connectWallet} className='cta-button connect-button'>\n            Sign in with Lens\n            </button>\n            <div className='sub-text'>\n                <p>Get your Lens profile &nbsp;\n                    <a\n                        className=\"App-link\"\n                        href=\"https://claim.lens.xyz/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >here</a>\n                </p>\n            </div>\n        </div>\n    );\n\n    const renderConnectedContainer = () => (\n        <div>\n            <p className=\"sub-text\"> Wallet: {currentAccount.slice(0, 6)}...{currentAccount.slice(-4)} </p>\n            { WorkoutForm() }\n        </div>\n    );\n\n    useEffect(() => {\n    checkIfWalletIsConnected();\n    }, [])\n    \n    return (\n        <div className=\"home-container\">\n            { !currentAccount && renderNotConnectedContainer() }\n            { currentAccount && renderConnectedContainer() }\n        </div>\n    );\n}\n\nexport default Home","/Users/matt/Desktop/crypto/playground/social/src/components/WorkoutForm.js",["47","48"],[],{"ruleId":"49","severity":1,"message":"50","line":3,"column":10,"nodeType":"51","messageId":"52","endLine":3,"endColumn":16},{"ruleId":"49","severity":1,"message":"53","line":10,"column":12,"nodeType":"51","messageId":"52","endLine":10,"endColumn":19},{"ruleId":"49","severity":1,"message":"54","line":10,"column":21,"nodeType":"51","messageId":"52","endLine":10,"endColumn":31},{"ruleId":"49","severity":1,"message":"55","line":11,"column":12,"nodeType":"51","messageId":"52","endLine":11,"endColumn":19},{"ruleId":"49","severity":1,"message":"56","line":3,"column":34,"nodeType":"51","messageId":"52","endLine":3,"endColumn":50},{"ruleId":"49","severity":1,"message":"57","line":22,"column":9,"nodeType":"51","messageId":"52","endLine":22,"endColumn":19},"no-unused-vars","'ethers' is defined but never used.","Identifier","unusedVar","'profile' is assigned a value but never used.","'setProfile' is assigned a value but never used.","'network' is assigned a value but never used.","'useFormikContext' is defined but never used.","'MyCheckbox' is assigned a value but never used."]