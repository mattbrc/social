{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Desktop/crypto/playground/social/src/components/Login.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport '../App.css';\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { connect } from \"@wagmi/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login() {\n  _s();\n\n  // consts\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [profile, setProfile] = useState([]); // Implement connectWallet method\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask -> https://metamask.io/\");\n        return;\n      } // method to request access to account.\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // This should print out public address once we authorize Metamask.\n\n      console.log(\"Connected\", accounts[0]);\n      const account = accounts[0];\n      setCurrentAccount(account);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log('Make sure you have metamask!');\n      return;\n    } else {\n      console.log('We have the ethereum object', ethereum);\n    } // Check if we're authorized to access the user's wallet\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    }); // Users can have multiple authorized accounts, we grab the first one.\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log('Found an authorized account:', account);\n    } else {\n      console.log('No authorized account found');\n    }\n  }; // Create a function to render if Lens account is not connected yet\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sparta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Sparta is a social fitness app built on \\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://lens.xyz/\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Lens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      className: \"cta-button connect-button\",\n      children: \"Sign in with Lens\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sub-text\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Get your Lens profile \\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"App-link\",\n          href: \"https://claim.lens.xyz/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"not-connected-container\",\n    children: renderNotConnectedContainer()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Login, \"90pB9t3vrUhF6gD4JB56TPtz3W4=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useState","ethers","connect","Login","currentAccount","setCurrentAccount","profile","setProfile","connectWallet","ethereum","window","alert","accounts","request","method","console","log","account","error","checkIfWalletIsConnected","length","renderNotConnectedContainer"],"sources":["/Users/matt/Desktop/crypto/playground/social/src/components/Login.js"],"sourcesContent":["import React from \"react\"\nimport '../App.css'\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"\nimport { connect } from \"@wagmi/core\";\n\nfunction Login() {\n    // consts\n    const [currentAccount, setCurrentAccount] = useState('');\n    const [profile, setProfile] = useState([])\n\n    // Implement connectWallet method\n    const connectWallet = async () => {\n        try {\n        const { ethereum } = window;\n\n        if (!ethereum) {\n            alert(\"Get MetaMask -> https://metamask.io/\");\n            return;\n        }\n\n        // method to request access to account.\n        const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n        // This should print out public address once we authorize Metamask.\n        console.log(\"Connected\", accounts[0]);\n        const account = accounts[0];\n        setCurrentAccount(account);\n        } catch (error) {\n        console.log(error)\n        }\n    }\n\n    const checkIfWalletIsConnected = async () => {\n        const { ethereum } = window;\n    \n        if (!ethereum) {\n        console.log('Make sure you have metamask!');\n        return;\n        } else {\n        console.log('We have the ethereum object', ethereum);\n        }\n    \n        // Check if we're authorized to access the user's wallet\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n    \n        // Users can have multiple authorized accounts, we grab the first one.\n        if (accounts.length !== 0) {\n        const account = accounts[0];\n            console.log('Found an authorized account:', account);\n        } else {\n            console.log('No authorized account found');\n        }\n    };\n\n    // Create a function to render if Lens account is not connected yet\n    const renderNotConnectedContainer = () => (\n        <div>\n            <h1>Sparta</h1>\n            <p>\n            Sparta is a social fitness app built on &nbsp;  \n            <a\n                className=\"App-link\"\n                href=\"https://lens.xyz/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                Lens\n            </a> \n            </p>\n            <button onClick={connectWallet} className='cta-button connect-button'>\n            Sign in with Lens\n            </button>\n            <div className='sub-text'>\n                <p>Get your Lens profile &nbsp;\n                    <a\n                        className=\"App-link\"\n                        href=\"https://claim.lens.xyz/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >here</a>\n                </p>\n            </div>\n        </div>\n      );\n\n    useEffect(() => {\n    checkIfWalletIsConnected();\n    }, [])\n    \n    return (\n        <div className=\"not-connected-container\">\n            { renderNotConnectedContainer() }\n        </div>\n    );\n}\n\nexport default Login"],"mappings":"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"},"metadata":{},"sourceType":"module"}